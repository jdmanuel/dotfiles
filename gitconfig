[user]
  name = J.D. Manuel
  email = jdmanuel@me.com

[alias]
  ci = commit
  cim = commit -m
  ciam = commit -am
  co = checkout
  st = status -sb
  br = branch
  diffc = diff --cached
  pl = pull
  ps = push
  pls = "!git pull && git push"
  pick = cherry-pick
  uncommit = reset --soft HEAD^
  amend = commit -a --amend -C HEAD
  amendm = commit -a --amend # amend with message
  rmuntracked = "!git ls-files --others --exclude-standard | xargs rm"
  l = log --pretty=format:'%h %an %Cred%ar %d %Cgreen%s'
  rmb = !sh -c '(git branch -D $1 || test 1) && git push origin :$1' -
  adrc = "!git add . && git rebase --continue"
  unpushed = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git log origin/$PROJ_BRANCH..HEAD"
  unpulled = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git fetch && git log HEAD..origin/$PROJ_BRANCH"
  clear = "!git reset .; git co .; git rmuntracked"
  parent-update = "!git fetch parent && git rebase parent/master"
  consume = !sh -c 'git cherry-pick $1 && git rmb $1' -
  count = shortlog -sn
  amend-to = !sh -c 'git stash && git edit $1 && git stash pop && git edit --amend' -
  rprune = remote prune origin
  reduce-to-subfolder = !sh -c 'git filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter $1 HEAD && git reset --hard && git for-each-ref refs/original/ | cut -f 2 | xargs -n 1 git update-ref -d && git reflog expire --expire=now --all && git gc --aggressive --prune=now && git remote rm origin' -

  # shortcuts so I get autocomlete
  stached-switch = "!~/dotfiles/bin/git-stached-switch"
  edit = "!~/dotfiles/bin/git-edit"
  request = "!~/dotfiles/bin/git-pull-request"

[apply]
  whitespace = nowarn

[diff]
  rename = copy

[color]
  branch = auto
  diff = auto
  status = auto

[color "branch"]
  current = green
  local = blue
  remote = yellow

#normal status has added/changed = green untracked/deleted/conflic = red -> more colors
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[pager]
  color = true


[core]
  excludesfile = %{HOME}/.gitignore

[push]
  default = current


[branch]
  autosetuprebase = always # rebase when pulling

[rerere]
  enabled = true # store resolved rebase steps even when aborted
